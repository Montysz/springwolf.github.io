"use strict";(self.webpackChunkspringwolf_docs=self.webpackChunkspringwolf_docs||[]).push([[128],{8495:function(t,o,n){n.r(o),n.d(o,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var e=n(7462),i=n(3366),a=(n(7294),n(3905)),r=["components"],s={sidebar_position:1},u="Introduction",l={unversionedId:"introduction",id:"introduction",isDocsHomePage:!1,title:"Introduction",description:"What is it",source:"@site/docs/introduction.md",sourceDirName:".",slug:"/introduction",permalink:"/docs/introduction",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/introduction.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Quickstart",permalink:"/docs/quickstart"}},c=[{value:"What is it",id:"what-is-it",children:[],level:2},{value:"What does it do",id:"what-does-it-do",children:[],level:2},{value:"Demo",id:"demo",children:[],level:2}],d={toc:c};function p(t){var o=t.components,s=(0,i.Z)(t,r);return(0,a.kt)("wrapper",(0,e.Z)({},d,s,{components:o,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"introduction"},"Introduction"),(0,a.kt)("h2",{id:"what-is-it"},"What is it"),(0,a.kt)("p",null,"API Documentation is an important part of every project and product, but can be painful to maintain manually.\nSpring Boot projects have great solutions for auto-generated documentation for REST APIs to overcome this pain (such as springfox, or springdoc-openapi)."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"However, until now there were no solutions for async APIs (such as kafka, amqp etc.). Springwolf aims to solve this and provide auto-generated documentation for async APIs built in Spring Boot. You don't need to change your code - just add a simple configuration class and it works!")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"springwolf publishing demo",src:n(84).Z})),(0,a.kt)("h2",{id:"what-does-it-do"},"What does it do"),(0,a.kt)("p",null,"If you are using Spring Boot annotation based listeners (such as ",(0,a.kt)("inlineCode",{parentName:"p"},"@KafkaListener"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"@RabbitListener")," etc.), you probably have something like this in your codebase:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@Service\npublic class ExampleConsumer {\n\n    @KafkaListener(topics = "example-topic")\n    public void receiveExamplePayload(ExamplePayloadDto payload) {\n        // Do something with payload\n    }\n\n}\n')),(0,a.kt)("p",null,"By simply adding Springwolf dependency and a short configuration class to your project you will automatically get:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"An endpoint returning an asyncapi document (similar to an openapi document) describing your async API."),(0,a.kt)("li",{parentName:"ul"},"A web UI for convenient use by your developers, QA or clients of your async API."),(0,a.kt)("li",{parentName:"ul"},"An easy way to publish messages to your async API with a click of a button")),(0,a.kt)("h2",{id:"demo"},"Demo"),(0,a.kt)("p",null,"You are welcome to take a look at a ",(0,a.kt)("a",{parentName:"p",href:"https://springwolf.github.io/springwolf-ui/"},"live demo")," of springwolf."))}p.isMDXComponent=!0},84:function(t,o,n){o.Z=n.p+"assets/images/demo-9f314b728b957b686c32585ff0a7c8a0.gif"}}]);